//
//  Extension.swift
//  Filters
//
//  Created by Bharat Shilavat on 15/05/25.
//

import Foundation

enum FilterType: String, CaseIterable {
    case additionCompositing = "CIAdditionCompositing"
    case affineClamp = "CIAffineClamp"
    case affineTile = "CIAffineTile"
    case areaAverage = "CIAreaAverage"
    case areaHistogram = "CIAreaHistogram"
    case areaMaximum = "CIAreaMaximum"
    case areaMaximumAlpha = "CIAreaMaximumAlpha"
    case areaMinimum = "CIAreaMinimum"
    case areaMinimumAlpha = "CIAreaMinimumAlpha"
    case blendWithAlphaMask = "CIBlendWithAlphaMask"
    case blendWithMask = "CIBlendWithMask"
    case bloom = "CIBloom"
    case boxBlur = "CIBoxBlur"
    case bumpDistortion = "CIBumpDistortion"
    case circleSplashDistortion = "CICircleSplashDistortion"
    case colorBlendMode = "CIColorBlendMode"
    case colorBurnBlendMode = "CIColorBurnBlendMode"
    case colorControls = "CIColorControls"
    case colorCube = "CIColorCube"
    case colorInvert = "CIColorInvert"
    case colorMap = "CIColorMap"
    case colorMatrix = "CIColorMatrix"
    case colorMonochrome = "CIColorMonochrome"
    case convolution3X3 = "CIConvolution3X3"
    case convolution5X5 = "CIConvolution5X5"
    case convolution9Horizontal = "CIConvolution9Horizontal"
    case convolution9Vertical = "CIConvolution9Vertical"
    case crop = "CICrop"
    case darkenBlendMode = "CIDarkenBlendMode"
    case differenceBlendMode = "CIDifferenceBlendMode"
    case discBlur = "CIDiscBlur"
    case dissolveTransition = "CIDissolveTransition"
    case dotScreen = "CIDotScreen"
    case edges = "CIEdges"
    case exclusionBlendMode = "CIExclusionBlendMode"
    case exposureAdjust = "CIExposureAdjust"
    case falseColor = "CIFalseColor"
    case gaussianBlur = "CIGaussianBlur"
    case gammaAdjust = "CIGammaAdjust"
    case gloom = "CIGloom"
    case hardLightBlendMode = "CIHardLightBlendMode"
    case hueAdjust = "CIHueAdjust"
    case hueBlendMode = "CIHueBlendMode"
    case lightenBlendMode = "CILightenBlendMode"
    case linearBurnBlendMode = "CILinearBurnBlendMode"
    case linearDodgeBlendMode = "CILinearDodgeBlendMode"
    case linearGradient = "CILinearGradient"
    case photoEffectChrome = "CIPhotoEffectChrome"
    case photoEffectFade = "CIPhotoEffectFade"
    case photoEffectInstant = "CIPhotoEffectInstant"
    case photoEffectMono = "CIPhotoEffectMono"
    case photoEffectNoir = "CIPhotoEffectNoir"
    case photoEffectProcess = "CIPhotoEffectProcess"
    case photoEffectTonal = "CIPhotoEffectTonal"
    case photoEffectTransfer = "CIPhotoEffectTransfer"
    case pinchDistortion = "CIPinchDistortion"
    case pixellate = "CIPixellate"
    case redEyeReduction = "CIRedEyeReduction"
    case sepiaTone = "CISepiaTone"
    case sharpenLuminance = "CISharpenLuminance"
    case softLightBlendMode = "CISoftLightBlendMode"
    case sourceAtopCompositing = "CISourceAtopCompositing"
    case sourceInCompositing = "CISourceInCompositing"
    case sourceOutCompositing = "CISourceOutCompositing"
    case sourceOverCompositing = "CISourceOverCompositing"
    case straightenFilter = "CIStraightenFilter"
    case subtractBlendMode = "CISubtractBlendMode"
    case temperatureAndTint = "CITemperatureAndTint"
    case toneCurve = "CIToneCurve"
    case unsharpMask = "CIUnsharpMask"
    case vibrance = "CIVibrance"
    case vortexDistortion = "CIVortexDistortion"
    case whitePointAdjust = "CIWhitePointAdjust"

    static var allFilterNames: [String] {
        return FilterType.allCases.map { $0.rawValue }
    }
}
